schema {
  query: Query
  mutation: Mutation
}
type Query {
  user(id: UUID): UserNode
  allOrganizations(offset: Int, limit: Int): OrganizationNodePage
  organization(id: UUID!): OrganizationNode
  userInvitations(offset: Int, limit: Int): OrganizationInvitationNodePage
  allOrganizationInvitations(id: UUID!, offset: Int, limit: Int): OrganizationInvitationNodePage
  allProjects(offset: Int, limit: Int): ProjectNodePage
  project(id: UUID, slug: String): ProjectNode
  allPackages(organizationId: UUID, projectId: UUID, offset: Int, limit: Int): PackageNodePage
  package(id: UUID, slug: String): PackageNode
  clusterlevel(id: UUID): ClusterLevelNode
}
scalar UUID
type UserNode {
  id: UUID!
  email: String
  name: String
  familyName: String
  givenName: String
  avatarImage: String
}
type OrganizationNodePage {
  totalCount: Int
  resultCount: Int
  offset: Int
  limit: Int
  results: [OrganizationNode]
}
type OrganizationNode {
  created: DateTime!
  title: String!
  description: String
  id: UUID!
  avatarImage: String
  members: [OrganizationMember]
}
scalar DateTime
type OrganizationMember {
  user: UserNode
  role: String
}
type OrganizationInvitationNodePage {
  totalCount: Int
  resultCount: Int
  offset: Int
  limit: Int
  results: [OrganizationInvitationNode]
}
type OrganizationInvitationNode {
  id: UUID!
  organization: OrganizationNode!
  email: String!
}
type ProjectNodePage {
  totalCount: Int
  resultCount: Int
  offset: Int
  limit: Int
  results: [ProjectNode]
}
type ProjectNode {
  title: String!
  description: String
  keycloakData: JSONString!
  id: UUID!
  specRepository: String!
  specRepositoryBranch: String
  created: DateTime!
  specType: ProjectSpecType!
  currentCommit: String!
  currentCommitDateTime: DateTime
  repositoryStatus: ProjectRepositoryStatus!
  accessUsername: String!
  accessToken: String
  organization: OrganizationNode
  packages: [PackageNode!]!
  sops: [SOPSProviderNode]
  members: [ProjectMember]
}
scalar JSONString
enum ProjectSpecType {
  PLAIN
  HELM
}
enum ProjectRepositoryStatus {
  UNKNOWN
  CLONING_PENDING
  CLONING
  CLONING_FAILED
  CLONING_SUCCESSFUL
  BRANCH_UNAVAILABLE
  AUTH_FAILED
  PARSING_FAILED
  OK
}
type PackageNode {
  title: String!
  description: String
  id: UUID!
  project: ProjectNode!
  dirPath: String!
  type: String!
  namespace: String!
  fileInformation: [FileInformationNode]
  hash: String!
  deployments(level: String, switchable: Boolean): [DeploymentNode]
  clusterLevel(level: String): [ClusterLevelNode]
}
type FileInformationNode {
  path: String
  encrypted: Boolean
}
type DeploymentNode {
  title: String!
  description: String
  id: UUID!
  ports: String!
  clusterLevel: ClusterLevelNode!
  isSwitchable: Boolean!
}
type ClusterLevelNode {
  title: String!
  description: String
  id: UUID!
  package: PackageNode!
  type: ClusterLevelType!
  valuesPath: String!
  valuesType: ClusterLevelValuesType
  sopsCredentials: SOPSProviderNode
  deployments: [DeploymentNode!]!
  specsUrl: String
}
enum ClusterLevelType {
  LOCAL
  REMOTE
}
enum ClusterLevelValuesType {
  FILE
  DIR
}
union SOPSProviderNode = AWSKMSNode | PGPKeyNode
type AWSKMSNode {
  title: String!
  description: String
  id: UUID!
  accessKey: String!
  secretAccessKey: String!
}
type PGPKeyNode {
  title: String!
  description: String
  id: UUID!
  privateKey: String!
}
type ProjectMember {
  user: UserNode
  role: String
}
type PackageNodePage {
  totalCount: Int
  resultCount: Int
  offset: Int
  limit: Int
  results: [PackageNode]
}
type Mutation {
  createUpdateOrganization(input: CreateUpdateOrganizationInput!): CreateUpdateOrganizationPayload
  createInvitation(email: String, id: UUID): CreateOrganizationMemberInvitation
  revokeInvitation(id: UUID): RevokeOrganizationMemberInvitation
  answerInvitation(accepted: Boolean, id: UUID): UpdateOrganizationMemberInvitation
  updateOrganizationMember(id: UUID, role: OrganizationMemberRoleEnum, user: UUID): UpdateOrganizationMember
  removeOrganizationMember(id: UUID, user: UUID): DeleteOrganizationMember
  createUpdateProject(input: CreateUpdateProjectInput!): CreateUpdateProjectPayload
  createProjectMember(id: UUID, role: ProjectMemberRoleEnum, user: UUID): CreateProjectMember
  deleteProjectMember(id: UUID, user: UUID): DeleteProjectMember
  deleteProject(id: UUID): DeleteProject
  createUpdateClusterLevel(input: CreateUpdateClusterLevelInput!): CreateUpdateClusterLevelPayload
  deleteClusterLevel(id: UUID): DeleteClusterLevel
  createUpdateSops(id: UUID, sopsData: SOPSInputType!): CreateUpdateSOPS
  deleteSops(id: UUID): DeleteSOPS
}
input CreateUpdateOrganizationInput {
  title: String!
  description: String
  onTrial: Boolean
  avatarImage: String
  id: ID
  clientMutationId: String
}
type CreateUpdateOrganizationPayload {
  organization: OrganizationNode
  errors: [ErrorType]
  clientMutationId: String
}
type ErrorType {
  field: String!
  messages: [String!]!
}
type CreateOrganizationMemberInvitation {
  ok: Boolean
}
type RevokeOrganizationMemberInvitation {
  ok: Boolean
}
type UpdateOrganizationMemberInvitation {
  ok: Boolean
}
enum OrganizationMemberRoleEnum {
  admin
  member
}
type UpdateOrganizationMember {
  ok: Boolean
}
type DeleteOrganizationMember {
  ok: Boolean
}
input CreateUpdateProjectInput {
  title: String!
  description: String
  specRepository: String!
  specRepositoryBranch: String
  specType: String!
  currentCommit: String
  currentCommitDateTime: DateTime
  accessUsername: String
  accessToken: String
  organization: UUID!
  id: ID
  clientMutationId: String
}
type CreateUpdateProjectPayload {
  project: ProjectNode
  errors: [ErrorType]
  clientMutationId: String
}
enum ProjectMemberRoleEnum {
  admin
  member
}
type CreateProjectMember {
  ok: Boolean
}
type DeleteProjectMember {
  ok: Boolean
}
type DeleteProject {
  ok: Boolean
}
input CreateUpdateClusterLevelInput {
  title: String!
  description: String
  type: String!
  package: ID!
  sopsCredentials: ID
  valuesPath: String
  valuesType: String
  id: ID
  clientMutationId: String
}
type CreateUpdateClusterLevelPayload {
  clusterLevel: ClusterLevelNode
  errors: [ErrorType]
  clientMutationId: String
}
type DeleteClusterLevel {
  ok: Boolean
}
input SOPSInputType {
  title: String!
  description: String
  sopsType: SOPSTypeEnum!
  project: UUID!
  secret1: String
  secret2: String
  secret3: String
}
enum SOPSTypeEnum {
  aws
  pgp
}
type CreateUpdateSOPS {
  ok: Boolean
}
type DeleteSOPS {
  ok: Boolean
}