# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AddressNode {
    formatted: String!
    id: ID!
    invoiceAddress: [OrganizationNode!]!
    latitude: Float
    locality: LocaltyNode
    longitude: Float
    primaryAddress: [OrganizationNode!]!
    raw: String!
    route: String!
    streetNumber: String!
}

type ClusterLevelNode {
    deployments: [DeploymentNode!]!
    description: String
    id: UUID!
    package: PackageNode!
    sopsCredentials: SOPSProviderNode
    title: String!
    type: ClusterLevelType!
    valuesPath: String!
}

type CountryNode {
    code: String!
    id: ID!
    name: String!
    states: [StateNode!]!
}

type CreateOrganization {
    code: String
    message: String
    organization: OrganizationNode
    success: Boolean
}

type DeploymentNode {
    clusterlevel: ClusterLevelNode!
    description: String
    id: UUID!
    isSwitchable: Boolean!
    ports: String!
    title: String!
}

type LocaltyNode {
    addresses: [AddressNode!]!
    id: ID!
    name: String!
    postalCode: String!
    state: StateNode!
}

type Mutation {
    createOrganization(title: String): CreateOrganization
}

type OrganizationNode {
    created: DateTime!
    description: String
    id: UUID!
    invoiceTaxAddress: AddressNode
    primaryAddress: AddressNode
    slug: String!
    title: String!
}

type PackageNode {
    description: String
    dirname: String!
    environments: [ClusterLevelNode!]!
    id: UUID!
    namespace: String!
    project: ProjectNode!
    slug: String!
    title: String!
    type: String!
}

type ProjectNode {
    accessToken: String!
    accessUsername: String!
    created: DateTime!
    currentCommit: String!
    description: String
    id: UUID!
    members: [UserNode]
    packages: [PackageNode]
    repoDir: String!
    slug: String!
    specRepository: String!
    specRepositoryBranch: String
    specType: ProjectSpecType!
    title: String!
}

type Query {
    allClusterLevels: [ClusterLevelNode]
    allDeployments: [DeploymentNode]
    allOrganizations: [OrganizationNode]
    allPackages: [PackageNode]
    allProjects: [ProjectNode]
    allSOPSProvider: [SOPSProviderNode]
    allUsers: [UserNode]
    myOrganization: OrganizationNode
    package(id: UUID, slug: String): PackageNode
    project(id: UUID, slug: String): ProjectNode
}

type SOPSProviderNode {
    clusterlevelSet: [ClusterLevelNode!]!
    id: ID!
    username: String!
}

type StateNode {
    code: String!
    country: CountryNode!
    id: ID!
    localities: [LocaltyNode!]!
    name: String!
}

type UserNode {
    avatar: String!
    created: DateTime!
    dateJoined: DateTime!
    email: String!
    firstName: String!
    id: UUID!
    isActive: Boolean!
    isStaff: Boolean!
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    password: String!
    salutation: String!
}

enum ClusterLevelType {
    LOCAL
    REMOTE
}

enum ProjectSpecType {
    HELM
    PLAIN
}


scalar DateTime

scalar UUID