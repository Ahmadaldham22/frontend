# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union SOPSProviderNode = AWSKMSNode | PGPKeyNode

type AWSKMSNode {
    description: String
    title: String!
}

type ClusterLevelNode {
    deployments: [DeploymentNode!]!
    description: String
    id: UUID!
    package: PackageNode!
    sopsCredentials: SOPSProviderNode
    specsUrl: String
    title: String!
    type: ClusterLevelType!
    valuesPath: String!
    valuesType: ClusterLevelValuesType
}

type CreateUpdateClusterLevelPayload {
    clientMutationId: String
    clusterLevel: ClusterLevelNode
    errors: [ErrorType]
}

type CreateUpdateOrganizationPayload {
    clientMutationId: String
    errors: [ErrorType]
    organization: OrganizationNode
}

type CreateUpdateProjectPayload {
    clientMutationId: String
    errors: [ErrorType]
    project: ProjectNode
}

type CreateUpdateSOPS {
    ok: Boolean
}

type DeleteClusterLevel {
    ok: Boolean
}

type DeleteProject {
    ok: Boolean
}

type DeleteSOPS {
    ok: Boolean
}

type DeploymentNode {
    clusterLevel: ClusterLevelNode!
    description: String
    id: UUID!
    isSwitchable: Boolean!
    ports: String!
    title: String!
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type FileInformationNode {
    encrypted: Boolean
    path: String
}

type Mutation {
    createUpdateClusterLevel(input: CreateUpdateClusterLevelInput!): CreateUpdateClusterLevelPayload
    createUpdateOrganization(input: CreateUpdateOrganizationInput!): CreateUpdateOrganizationPayload
    createUpdateProject(input: CreateUpdateProjectInput!): CreateUpdateProjectPayload
    createUpdateSops(sopsData: SOPSInputType!): CreateUpdateSOPS
    deleteClusterLevel(id: UUID): DeleteClusterLevel
    deleteProject(id: UUID): DeleteProject
    deleteSops(id: UUID): DeleteSOPS
}

type OrganizationNode {
    created: DateTime!
    description: String
    id: UUID!
    title: String!
}

type OrganizationNodePage {
    limit: Int
    offset: Int
    resultCount: Int
    results: [OrganizationNode]
    totalCount: Int
}

type PGPKeyNode {
    description: String
    title: String!
}

type PackageNode {
    clusterLevel(level: String): [ClusterLevelNode]
    deployments(level: String, switchable: Boolean): [DeploymentNode]
    description: String
    dirPath: String!
    environments: [ClusterLevelNode!]!
    fileInformation: [FileInformationNode]
    hash: String!
    id: UUID!
    namespace: String!
    project: ProjectNode!
    title: String!
    type: String!
}

type ProjectNode {
    accessToken: Boolean
    accessUsername: String!
    created: DateTime!
    currentCommit: String!
    currentCommitDateTime: DateTime
    description: String
    id: UUID!
    keycloakData: JSONString!
    organization: OrganizationNode
    packages: [PackageNode!]!
    repositoryStatus: ProjectRepositoryStatus!
    specRepository: String!
    specRepositoryBranch: String
    specType: ProjectSpecType!
    title: String!
}

type ProjectNodePage {
    limit: Int
    offset: Int
    resultCount: Int
    results: [ProjectNode]
    totalCount: Int
}

type Query {
    allOrganizations(limit: Int, offset: Int): OrganizationNodePage
    allProjects(limit: Int, offset: Int): ProjectNodePage
    project(id: UUID, slug: String): ProjectNode
}

enum ClusterLevelType {
    LOCAL
    REMOTE
}

enum ClusterLevelValuesType {
    DIR
    FILE
}

enum ProjectRepositoryStatus {
    AUTH_FAILED
    BRANCH_UNAVAILABLE
    CLONING
    CLONING_FAILED
    CLONING_PENDING
    CLONING_SUCCESSFUL
    OK
    PARSING_FAILED
    UNKNOWN
}

enum ProjectSpecType {
    HELM
    PLAIN
}

enum SOPSTypeEnum {
    aws
    pgp
}

input CreateUpdateClusterLevelInput {
    clientMutationId: String
    description: String
    id: ID
    package: ID!
    sopsCredentials: ID
    title: String!
    type: String!
    valuesPath: String
    valuesType: String
}

input CreateUpdateOrganizationInput {
    clientMutationId: String
    description: String
    id: ID
    onTrial: Boolean
    title: String!
}

input CreateUpdateProjectInput {
    accessToken: String
    accessUsername: String
    clientMutationId: String
    currentCommit: String
    currentCommitDateTime: DateTime
    description: String
    id: ID
    keycloakData: String!
    specRepository: String!
    specRepositoryBranch: String
    specType: String!
    title: String!
}

input SOPSInputType {
    description: String
    id: UUID
    project: UUID!
    secret1: String!
    secret2: String
    secret3: String
    sopsType: SOPSTypeEnum!
    title: String!
}


scalar UUID

scalar DateTime

scalar JSONString