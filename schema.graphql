# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union SOPSProviderNode = AWSKMSNode | PGPKeyNode

type AWSKMSNode {
    description: String
    id: UUID!
    title: String!
}

type AddressNode {
    formatted: String!
    id: ID!
    invoiceAddress: [OrganizationNode!]!
    latitude: Float
    locality: LocalityNode
    longitude: Float
    primaryAddress: [OrganizationNode!]!
    raw: String!
    route: String!
    streetNumber: String!
}

type ClusterLevelNode {
    deployments: [DeploymentNode!]!
    description: String
    id: UUID!
    package: PackageNode!
    sopsCredentials: SOPSProviderNode
    specsUrl: String
    title: String!
    type: ClusterLevelType!
    valuesPath: String!
    valuesType: ClusterLevelValuesType
}

type CountryNode {
    code: String!
    id: ID!
    name: String!
    states: [StateNode!]!
}

type CreateUpdateClusterLevelPayload {
    clientMutationId: String
    clusterLevel: ClusterLevelNode
    errors: [ErrorType]
}

type CreateUpdateProjectPayload {
    clientMutationId: String
    errors: [ErrorType]
    project: ProjectNode
}

type CreateUpdateSOPS {
    ok: Boolean
}

type DeleteClusterLevel {
    ok: Boolean
}

type DeleteProject {
    ok: Boolean
}

type DeleteSOPS {
    ok: Boolean
}

type DeploymentNode {
    clusterLevel: ClusterLevelNode!
    description: String
    id: UUID!
    isSwitchable: Boolean!
    ports: String!
    title: String!
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type FileInformationNode {
    encrypted: Boolean
    path: String
}

type LocalityNode {
    addresses: [AddressNode!]!
    id: ID!
    name: String!
    postalCode: String!
    state: StateNode!
}

type Mutation {
    createUpdateClusterLevel(input: CreateUpdateClusterLevelInput!): CreateUpdateClusterLevelPayload
    createUpdateProject(input: CreateUpdateProjectInput!): CreateUpdateProjectPayload
    createUpdateSops(sopsData: SOPSInputType!): CreateUpdateSOPS
    deleteClusterLevel(id: UUID): DeleteClusterLevel
    deleteProject(id: UUID): DeleteProject
    deleteSops(id: UUID): DeleteSOPS
    upsertOrganization(input: UpsertOrganizationInput!): UpsertOrganizationPayload
}

type NotificationSettingsNode {
    created: DateTime!
    id: UUID!
    invitationAccept: Boolean!
    invitationDecline: Boolean!
    memberAdd: Boolean!
    memberDelete: Boolean!
    memberEdit: Boolean!
    modified: DateTime!
    projectAdd: Boolean!
    projectDelete: Boolean!
    projectEdit: Boolean!
    usersettings: UserSettingsNode
}

type OrganizationNode {
    avatarUrl: String
    created: DateTime!
    description: String
    id: UUID!
    invoiceTaxAddress: AddressNode
    members: [OrganizationUserNode!]!
    modified: DateTime!
    primaryAddress: AddressNode
    slug: String!
    title: String!
}

type OrganizationNodePage {
    limit: Int
    offset: Int
    resultCount: Int
    results: [OrganizationNode]
    totalCount: Int
}

type OrganizationUserNode {
    created: DateTime!
    id: UUID!
    modified: DateTime!
    organization: OrganizationNode!
    role: OrganizationUserRole!
    user: UserNode!
}

type PGPKeyNode {
    description: String
    id: UUID!
    title: String!
}

type PackageNode {
    clusterLevel(level: String): [ClusterLevelNode]
    deployments(level: String, switchable: Boolean): [DeploymentNode]
    description: String
    dirPath: String!
    environments: [ClusterLevelNode!]!
    fileInformation: [FileInformationNode]
    hash: String!
    id: UUID!
    namespace: String!
    project: ProjectNode!
    title: String!
    type: String!
}

type PleaseRemoveMeNode {
    text: String
}

type ProjectNode {
    accessToken: String!
    accessUsername: String!
    created: DateTime!
    creator: UserNode
    currentCommit: String!
    currentCommitDateTime: DateTime
    description: String
    id: UUID!
    members: [ProjectUserNode!]!
    modified: DateTime!
    organization: OrganizationNode
    packages: [PackageNode!]!
    repoDir: String!
    repositoryStatus: ProjectRepositoryStatus!
    slug: String!
    sops: [SOPSProviderNode]
    specRepository: String!
    specRepositoryBranch: String
    specType: ProjectSpecType!
    title: String!
}

type ProjectNodePage {
    limit: Int
    offset: Int
    resultCount: Int
    results: [ProjectNode]
    totalCount: Int
}

type ProjectUserNode {
    created: DateTime!
    creator: Boolean!
    id: UUID!
    modified: DateTime!
    project: ProjectNode!
    role: ProjectUserRole!
    user: UserNode
}

type Query {
    allOrganizations(limit: Int, offset: Int): OrganizationNodePage
    allProjects(limit: Int, offset: Int): ProjectNodePage
    allUsers(limit: Int, offset: Int): UserNodePage
    assets: PleaseRemoveMeNode
    audits: PleaseRemoveMeNode
    collaborations: PleaseRemoveMeNode
    myOrganization: OrganizationNode
    payments: PleaseRemoveMeNode
    project(id: UUID, slug: String): ProjectNode
}

type StateNode {
    code: String!
    country: CountryNode!
    id: ID!
    localities: [LocalityNode!]!
    name: String!
}

type UpsertOrganizationPayload {
    avatarUrl: String
    clientMutationId: String
    code: String
    errors: [ErrorType]
    id: String
    instance: OrganizationNode
    message: String
    success: Boolean
    title: String
}

type UserNode {
    avatar: String!
    created: DateTime!
    email: String!
    firstName: String!
    id: UUID!
    isActive: Boolean!
    isStaff: Boolean!
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    modified: DateTime!
    organizations: [OrganizationUserNode!]!
    password: String!
    salutation: String!
    settings: [UserSettingsNode!]!
}

type UserNodePage {
    limit: Int
    offset: Int
    resultCount: Int
    results: [UserNode]
    totalCount: Int
}

type UserSettingsNode {
    created: DateTime!
    id: UUID!
    modified: DateTime!
    notifications: NotificationSettingsNode!
    user: UserNode!
}

enum ClusterLevelType {
    LOCAL
    REMOTE
}

enum ClusterLevelValuesType {
    DIR
    FILE
}

enum OrganizationUserRole {
    ADMIN
    MEMBER
}

enum ProjectRepositoryStatus {
    AUTH_FAILED
    BRANCH_UNAVAILABLE
    CLONING
    CLONING_FAILED
    CLONING_PENDING
    CLONING_SUCCESSFUL
    OK
    PARSING_FAILED
    UNKNOWN
}

enum ProjectSpecType {
    HELM
    PLAIN
}

enum ProjectUserRole {
    ADMIN
    MEMBER
}

enum SOPSTypeEnum {
    aws
    pgp
}

input CreateUpdateClusterLevelInput {
    clientMutationId: String
    description: String
    id: ID
    package: ID!
    sopsCredentials: ID
    title: String!
    type: String!
    valuesPath: String
    valuesType: String
}

input CreateUpdateProjectInput {
    accessToken: String!
    accessUsername: String!
    clientMutationId: String
    currentCommit: String
    description: String
    id: ID
    specRepository: String!
    specRepositoryBranch: String!
    specType: String!
    title: String!
}

input SOPSInputType {
    description: String
    id: UUID
    project: UUID!
    secret1: String!
    secret2: String
    secret3: String
    sopsType: SOPSTypeEnum!
    title: String!
}

input UpsertOrganizationInput {
    avatarUrl: String
    clientMutationId: String
    id: String
    title: String!
}


scalar DateTime

scalar UUID