query ProjectsQuery($limit: Int, $offset: Int) {
    allProjects(limit: $limit, offset: $offset) {
        totalCount
        results {
            title,
            modified,
            description,
            currentCommit,
            id,
            slug,
            packages {
                title,
            }
            sops {
                ... on AWSKMSNode {
                    title,
                    id
                },
                ... on PGPKeyNode {
                    title,
                    id
                },
            }
            members {
                user {
                    firstName,
                    lastName,
                    avatar,
                }
            }
        }
    }
}

query ProjectDetailQuery($slug: String) {
    project(slug: $slug) {
        created,
        modified,
        title,
        description,
        slug,
        id,
        specRepository,
        specRepositoryBranch,
        specType,
        repoDir,
        currentCommit,
        accessUsername,
        accessToken,
        creator {
            firstName,
            lastName,
        }
        members {
            id,
            user {
                firstName,
                lastName,
                avatar,
                lastLogin,
                email,
            }
            role,
        },
        packages {
            title,
            description,
            type,
            namespace,
            id,
            environments {
                deployments {
                    title,
                    id,
                }
            },
            clusterLevel {
                title,
                description,
                id,
                package{
                    id
                },
                type,
                valuesPath,
                valuesType,
                sopsCredentials {
                    ... on AWSKMSNode {
                    title,
                    id,
                },
                ... on PGPKeyNode {
                    title,
                    id,
                },
                },
            }

        },
        sops {
            ... on AWSKMSNode {
                title,
                description,
                id
            },
            ... on PGPKeyNode {
                title
                description,
                id
            },
        }

    }
}

query ProjectDetailOtherProjectsQuery {
    allProjects(limit: 1000) {
        results {
            title,
            modified,
            slug,
            id,
            packages {
                title
            }
        }
    }
}

mutation CreateProject(
  $title: String!
  $description: String!
  $specRepository: String!
  $specType: String!
  $accessUsername: String!
  $accessToken: String!
  $specRepositoryBranch: String!
) {
  createUpdateProject(
    input: {
      title: $title
      description: $description
      specRepository: $specRepository
      specType: $specType
      specRepositoryBranch: $specRepositoryBranch
      accessUsername: $accessUsername
      accessToken: $accessToken
    }
  ) {
    project {
      title
    }
    errors {
      messages
      field
    }
  }
}

mutation UpdateProject(
  $title: String!
  $description: String!
  $specRepository: String!
  $specType: String!
  $accessUsername: String!
  $accessToken: String!
  $specRepositoryBranch: String!
  $id: ID
) {
  createUpdateProject(
    input: {
      title: $title
      description: $description
      specRepository: $specRepository
      specType: $specType
      specRepositoryBranch: $specRepositoryBranch
      accessUsername: $accessUsername
      accessToken: $accessToken
      id: $id
    }
  ) {
    project {
      title
    }
    errors {
      messages
      field
    }
  }
}


mutation DeleteProject($id: UUID) {
  deleteProject(id: $id) {
    ok
  }
}

mutation createUpdateSops(
    $title: String!
    $description: String
    $sopsType: SOPSTypeEnum!
    $project: UUID!
    $secret1: String!
    $secret2: String
    $secret3: String
) {
    createUpdateSops(
        sopsData: {
            title: $title
            description: $description
            sopsType: $sopsType
            project: $project
            secret1: $secret1
            secret2: $secret2
            secret3: $secret3
        }
    ) {
        ok
    }
}

mutation createUpdateClusterLevel(
    $title: String!
    $description: String
    $type: String!
    $package: ID!
    $sopsCredentials: ID
    $valuesPath: String
    $id: ID
) {
    createUpdateClusterLevel(
        input: {
                title: $title
                description: $description
                type: $type
                package: $package
                sopsCredentials: $sopsCredentials
                valuesPath: $valuesPath
                id: $id
        }
    ) {
        clusterLevel {
            title,
            id
        },
        errors {
            field,
            messages
        }
    }
}